FORMAT: 1A
HOST: http://api.ask-fast.com

# Ask Fast
Ask Fast offers a API framework can create dialogs via every media type e.g sms, xmpp, email, twitter, voice and ussd. 

The Ask Fast API enables you to send your message to your contacts, and receive their answer fast and easy. To get you message to the end user you can choose your favorite way of communicating, currently we support: sms, xmpp, email, twitter and voice. The API use web standard formats like jsons to make developingg as easy as posible. 

The API is split up two parts. 

The first part is the pure Ask Fast API, this allows you (the developer) to host you own questions and answers. This requires your own server and server sided  code. 

The second makes use of the Ask fast Marketplace. Here we do everything for you, so you do not have to worry about the server side. You can focus on what you do best creating great apps. Make your choose and get started!






## libraries

Library support is currently restricted to Java and PHP, if you have build your own library please let us know at: api@asf-fast.com. You can download the libraries from here, the manuals are in this document:

- [Java library](https://github.com/askfast/askfast-api-java)
- [PHP library] (https://github.com/askfast/askfast-api-php)

Api documentation for each labrary can be found on the github and bellow

## authentication

For authentication the Ask Fast API uses a unique token this token can be requierd with an oath request as descriped in the login section. To make sure the connection is save all calls have to be via a HTTPS connections regualar HTTP will fail.

## error handling

Ask Fast Api uses regular HTTP response codes to indicate suesses or fail of the API request. A 200 response indicates a succesfull request. The 4xx response often means an errer form the user side, this could be an invalid request or a not authorised (401).

Overview of HTTP response codes:

- 200 → everything whent smoothly.
- 400 → Bad request maybe a parameter is missing?
- 401 → Not authorised, the autosisation faild.
- 404 → Request not found.
- 5xx → internal server error, we try to make the error logs easy to read for you.


## dates

All dates are standard UNIX (epoch) coded. This represents the seconds passed since 01-01-1970. Some examples:

- 1396350000 - 12:00:00 01-01-2014
- 946728000   - 12:00:00 01-01-2000


## Pagination

At the moment the pagination limitations is a 1000 responses per call. If you wish to go back even further you can change the date attribute, to fetch the results for a certain period.  

## Rate limiting
The Ask Fast Api uses a fair use policy, when you do not abuse the system you do not have a rate limiting

## language codes

If you want to make a call and use Text To Speech (TTS) you can use the following language codes

|codes|langue|
|----|---|
|ca-es|Catalan|
|zh-cn|Chinese (China)|
|zh-hk|Chinese (Hong Kong)|
|zh-tw|Chinese (Taiwan)|
|da-dk|Danish|
|nl-nl|Dutch|
|en-au|English (Australia)|
|en-ca|English (Canada)|
|en-gb|nglish (Great Britain)|
|en-in|English (India)|
|en-us|English (United States)|
|fi-fi|Finnish|
|fr-ca|French (Canada)|
|fr-fr|French (France)|
|de-de|German|
|it-it|Italian|
|ja-jp|Japanese|
|ko-kr|Korean|
|nb-no|Norwegian
|pl-pl|Polish|
|pt-br|Portuguese (Brazil)|
|pt-pt|Portuguese (Portugal)|
|ru-ru|Russian|
|es-mx|Spanish (Mexico)|
|es-es|Spanish (Spain)|
|sv-se|Swedish (Sweden)|



#group account

You can use the Ask Fast API, to directly talk to our servers to send messages. To send a questions this questions have to be hosted on your own server. This can be an easy mysql database or any other form of you liking.
If you do not want to host this your self you can use our Marketplace.

## login [/keyserver/token]
### login to Ask Fast [POST]

Ask fast api does not use a login the servers expects a authorization token for every request. 
This token can be fethced with this request.


Set these fields manualy when trying the example on the right


#### header fields

|field|value|
|----|----|
|`Content-Type`|`application/x-www-form-urlencoded`|


#### x-www-form-urlencoded fields

|field|value|description|
|----|----|----|
|`client_id`|your client id| can be found in the developer page|
|`grant_type`|resfresh_token|always refresh token|
|`refresh_token`|your client id|can be found at the developer page|
|`client_secret`|none|always none|

+ header 

            Content-Type:application/x-www-form-urlencoded

+ request (application/x-www-form-urlencoded)

            client_id=xxxxxxxxxxxxxxxxxxxxxxx&grant_type=refresh_token&refresh_token=xxxxxxxxxxxxxxxxxxxxxxxxxx&client_secret=none
            

+ response 200 (application/json)
    
        {
            "expires_in": 3600,
            "refresh_token": "xxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
            "access_token": "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
        }

+ response 400 (application/json)

        {
            "error":"xxxxxxx",
            "error_description":"xxxxxxxxxxxxxx"
        }

## acount info [/info]
### get acount info [GET]

## header fields

|field|value|
|----|----|
|`Authorization`|`Bearer xxxxxxxxxxxxxxxxxxxx`|
|`Content-Type`|`application/json`|

+ headers
  
        Content-Type: application/json
        Authorization: Bearer xxxxxxxxxxxxxxxxxxxx

+ response 200 (aplication/json)

        {
            id: "fb8e16cc-c094-4341-8135-8d3796632ea2"
            userName: "exceltest"
            password: "779f334a13f4616cdd08d5bd7dc41717"
            name: "Excel+Test"
            phoneNumber: null
            email: null
            creationTime: 1398852668448
            status: "ACTIVE"
        }

## get Keys [/key]
### get key [GET]

## header fields

|field|value|
|----|----|
|`Authorization`|`Bearer xxxxxxxxxxxxxxxxxxxx`|
|`Content-Type`|`application/json`|

+ headers
  
        Content-Type: application/json
        Authorization: Bearer xxxxxxxxxxxxxxxxxxxx

+ response 200 (aplication/json)

        {
            accountId: xxxxxxxxxxxxxxxxxxxxxxxx
            refreshToken: xxxxxxxxxxxxxxxxxxxxxxxx
        }

        
## delete key [/key/{token}]
### delete key [DELETE]

+ Parameters
    + token (required, String , `xxxxx`)... String `token` of the key.

+ response 200 (aplication/json)

        {
            hallo
        }

## adapters [/adapter]

### Get Ask Fast adapters [GET]

To send a message you need to specify the adapter, this messages retrieves all the adapters

## header fields

|field|value|
|----|----|
|`Authorization`|`Bearer xxxxxxxxxxxxxxxxxxxx`|
|`Content-Type`|`application/json`|

+ headers
  
        Content-Type: application/json
        Authorization: Bearer xxxxxxxxxxxxxxxxxxxx

+ response 200 (aplivations/json)

        {
            configId: "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
            dialogId: null,
            initialAgentURL: "",
            publicKey: "",
            adapterType: "ussd",
            preferred_language: "nl",
            address: "",
            myAddress: "",
            keyword: null,
            status: "",
            xsiURL: "",
            xsiUser: "",
            xsiPasswd: "",
            xsiSubscription: "xxxxxxxxxx",
            accessToken: "xxxxxxxxx",
            accessTokenSecret: "xxxxxxxxxxx",
            anonymous: false,
            owner: null,
            accounts: [
                "xxxxxxxxxxxxxxxxxxxx"
            ],
            properties: {
                ADAPTER_CREATION_TIME: 1400167116197
            }
        }



### update inbound agent url [PUT]

#### body

        {
            initialAgentURL:<initial agent URL if any, for inbound scenarios>
            anonymous:false
        }


#### header fields

|field|value|
|----|----|
|`Authorization`|`Bearer xxxxxxxxxxxxxxxxxxxx`|
|`Content-Type`|`application/json`|

+ headers
  
        Content-Type: application/json
        Authorization: Bearer xxxxxxxxxxxxxxxxxxxx


+ response 200

        {
            configId: "<uniqueadapterid>",
            adapterType: "<adapterType>",
            address: "<adapterAddress>",
            keyword: null,
            initialAgentURL: <initialagentURLifany,forinboundscenarios>,
            anonymous: false
        }


#group send message

a Dialog-Scenario consists of Questions. These Question URLs must be accessible to the ASK-Fast Server. As response, these Questions can be sent as static string. 
In Order to facilitate ease of development, we have implemented an open-source library  to prepare questions. 
Use of this library frees the developer from knowing how the Question should be formatted and also keeps it flexible to any changes in the Question format in the future. 
The general format of a Question JSON looks like:

            {
                "question_id":<some_id>,
                "question_text":"<text or url>",
                "type":"[ open | closed | comment | referral ]",
                "url":"<referral url>",
                "answers":[
                    { 
                        "answer_id":<some_id>,
                        "answer_text":"<text or url>",
                        "callback":"<url>"
                    }
                ],
                "event_callbacks":[
                    {
                        "event":"[answered|timeout|hangup|exception]",
                        "callback":"<url>"
                    }
                ],
                "media_properties": [
                    {
                        "medium": "[BROADSOFT | GTALK | SMS]",
                        "properties": 
                    {
                        "<MediumPropertyKey>": "<PropertyValue>"
                    }
                }
                ]
            }

#### optional propperties defined in the MediumPropertyKey key


|field                      |value|
|----                       |----|
|`TIMEOUT`                  |(Specific to a phone call) Defines the timeout associated with the call. Default value of “10s” is used for a no answer input on a closed question. “40s” is used for a call timeout for a redirection (referral question). “5s” is used for a a no answer input on an open question.|
|`ANSWER_INPUT`             | (EXPERIMENTAL!! Not specific to any channel) Defines if the answer is given via dtmf, text etc. Default value depends on the channel used. For a phonecall “dtmf” is used as standard and “text” is used for other text based channels such as SMS, EMAIL etc.|
|`ANSWER_INPUT_MIN_LENGTH`  |(Specific to Phonecall) Defines the length of the answer input. Typically used with dtmf input.|
|`ANSWER_INPUT_MAX_LENGTH`  |(Specific to Phonecall) Defines the length of the answer input. Typically used with dtmf input.|
|`TYPE`                     |Defines a subtype for the question type. E.g. open question with type: audio refers to voicemail. By default a minimum value of “1” and unbounded maximum value is taken.|
|`VOICE_MESSAGE_LENGTH`     |(Specific to phonecall) Defines the length of the voicemail to be recorded. By default “15s” is used to as the length of the voice message.|
|`RETRY_LIMIT`              |(Currently specific to phonecall) Defines the number of times the question should repeat in case of a wrong answer input. Works only for phonecalls so as to end a call with repeated input errors. Default value of “5” is used.|
|`VOICE_MESSAGE_BEEP`       |(Specific to phonecall) Boolean flag to indicate if a voice mssage start should be indicated by a beep or not. Default value is “true”.|
|`DTMF_TERMINATE`           |(Specific to phonecall) Boolean flag to indicate if the call should terminate when a dtmf is pressed. Default value is “true”.|
|`TSS_SPEED`                |(Specific to phonecall) Defines the speed at which the TTS is spoken by the TTS engine. Default value: “0”. Range: [-10, 10] where -10 is the slowest and 10|


## test send message [/dialoghandler/rpc]

### test message with map [POST]

##### body content:

        {
            "method": "outboundCallWithMap",
            "params": {
                "adapterID": "<adapterId>",
                "addressMap": {
                    "<address1>": "Alice"
                },
                "url": "<URL to fetch the Question from>",
                "accountID": "<accountID>",
                "bearerToken": "<access token by the GET Access Token call>",
                "senderName": "<sender Name>",
                "subject": "<Subject>"
            }
        }


#### header fields

|field|value|
|----|----|
|`Authorization`|`Bearer xxxxxxxxxxxxxxxxxxxx`|
|`Content-Type`|`application/json`|

+ headers
  
        Content-Type: application/json
        Authorization: Bearer xxxxxxxxxxxxxxxxxxxx

+ request

        {
            "method": "outboundCallWithMap",
            "params": {
                "adapterID": "<adapterId>",
                "addressMap": {
                    "<address1>": "Alice"
                },
                "url": "<URL to fetch the Question from>",
                "accountID": "<accountID>",
                "bearerToken": "<access token by the GET Access Token call>",
                "senderName": "<sender Name>",
                "subject": "<Subject>"
            }
        }


+ response 200 

        hallo

### test inbound message [POST]

#### body

        {
            "id": 1,
            "method": "changeAgent",
            "params": {
                "accountID": "<accountID>",
                "bearerToken": "<access token by the GET Access Token call>",
                "adapterID": "<adapterID>",
                "url": "http://myagenturl.com"
            }
        }

#### header fields

|field|value|
|----|----|
|`Authorization`|`Bearer xxxxxxxxxxxxxxxxxxxx`|
|`Content-Type`|`application/json`|

+ headers
  
        Content-Type: application/json
        Authorization: Bearer xxxxxxxxxxxxxxxxxxxx

+ request

        {
            "id": 1,
            "method": "changeAgent",
            "params": {
                "accountID": "<accountID>",
                "bearerToken": "<access token by the GET Access Token call>",
                "adapterID": "<adapterID>",
                "url": "http://myagenturl.com"
            }
        }


+ response 200 

        hallo



# group incomming messages

## sms

## call

## email

# group java api

[Java library](https://github.com/askfast/askfast-api-java)

This a library to make it easy to build and send  dialog senario's.
Here is a short description of basic fuctions. An example can be found in the GitHub.

##### The following are the methods used in general to create a dialog of questions and answers. 
- ask(“Question text”, nextURL)

    QuestionType: OPEN

    Method used to ask a question. By default this function creates an OPEN question i.e open to user input. 

- askByVoice(“Question text”, nextURL)

    QuestionType: OPENAUDIO
    Method used to ask a open audio question. 
    
- redirect(“to”, “redirectText”, “next”)

    QuestionType: REFERRAL
    Method used to ask a open audio question. 

- addAnswer(“Answer text”, “nextURL”)

    QuestionType: CLOSED
    
    Sets question type as CLOSED and then adds an answer to an existing question. 
    
    say(“Response text”)
    
    QuestionType: COMMENT
    
    Sets the question type as COMMENT, method used to respond to a particular answer from the user.
    
    say(“Response text”, “nextURL”)
    
    QuestionType: COMMENT
    Method used to respond to a particular answer from the user. The nextURL is added as an answer to the question.

## Initiating outbound communication requests:

Any outBound communication request works on the basis of oAuth 2.0 standard. For this to work, the following conditions must be met:

- The instance variable of AskFast must be created with accountID and refreshToken. E.g: AskFast askfast = new AskFast(<url>, <accountID>, <refreshToken>, <params>);
- Call the obtainAccessToken() method. This method will obtain the AccessToken from our keyserver.
    
- outBoundCall( “fromAddress”, “toAddress”, “url” )

    Initiates an outbound call (E.g. SMS, Phone call, XMPP message) based on the adapter keys provided while constructing the AskFast instance:
    
AskFast(String url, String accountID, String refreshToken)
 outBoundCall( “fromAddress”, “senderName”, “toAddress”, “url” ) 
Performs a similar outbound call like #7, but for all text based outBoundCalls (E.g. Email, SMS, XMPP etc) will identify the sender by the senderName. 
 outBoundCall( “fromAddress”, “senderName”, Collection<“toAddress”>, “url” ) 
This initiates a broadcast call to all the addresses in the Collection.
 outBoundCall( “fromAddress”, “senderName”, Collection<“toAddress”>, “url” ) 
This initiates a broadcast call to all the addresses in the Collection.
 outBoundCall( “fromAddress”, “senderName”, Map<“toAddress”, fMap<“ccAddress”, “ccName”>, Map<“bccAddress”, “bccName”>, “url” ) 
This is usually used exclusively for email broadcast. Special parameters for ccAddress and bccAddress allows corresponding functionalities. 
 render() or finish()
Method used to return the question thus formed in a JSON format.

## To ease outBoundCall requests, make use of the outBoundCall() method in the ASK-Fast API.
outBoundCall( “adapterID”, “address”, “url” ) throws Exception
Initiates an outbound call (E.g. SMS, Phone call, XMPP message) based on the adapter keys provided while constructing the AskFast instance:
AskFast(String baseHostURL, String accountID, String refreshToken)


